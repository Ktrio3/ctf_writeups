From main:
   0x00008d68 <+44>:	bl	0x8cd4 <key1>
   0x00008d6c <+48>:	mov	r4, r0
   0x00008d70 <+52>:	bl	0x8cf0 <key2>
   0x00008d74 <+56>:	mov	r3, r0
   0x00008d78 <+60>:	add	r4, r4, r3
   0x00008d7c <+64>:	bl	0x8d20 <key3>
   0x00008d80 <+68>:	mov	r3, r0
   0x00008d84 <+72>:	add	r2, r4, r3

We need to determine the value of r0 after each function

From key1: key1 = 8ce4
   0x00008cdc <+8>:	mov	r3, pc
   0x00008ce0 <+12>:	mov	r0, r3

So, key1 returns either 8cdc + 8 = 8ce4, as pc points to current instruction +8

From key2: key2 = 8d0c

   0x00008cfc <+12>:	add	r6, pc, #1
   0x00008d00 <+16>:	bx	r6
   0x00008d04 <+20>:	mov	r3, pc
   0x00008d06 <+22>:	adds	r3, #4
   0x00008d08 <+24>:	push	{r3}
   0x00008d0a <+26>:	pop	{pc}
   0x00008d0c <+28>:	pop	{r6}		; (ldr r6, [sp], #4)
   0x00008d10 <+32>:	mov	r0, r3

In the first instruction, r6 is set to 8cfc + 8 + 1 = 8d05

0x5 is 0101 in binary.

bx switches us to thumb mode, since r6[0] is 1.

Now that we are in thumb mode, mov r3, pc makes r3 equal to the
address of the current instruction + 4. We then add an extra 4.

From key3: key3 = 8d80

   0x00008d28 <+8>:	mov	r3, lr
   0x00008d2c <+12>:	mov	r0, r3

lr holds the return address, which is 8d80

Thus, our final sum is 108400
