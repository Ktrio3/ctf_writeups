#include <stdio.h>
#include <string.h>

int filter(char* cmd){
	int r=0;
	r += strstr(cmd, "flag")!=0;
	r += strstr(cmd, "sh")!=0;
	r += strstr(cmd, "tmp")!=0;
	return r;
}
int main(int argc, char* argv[], char** envp){
	putenv("PATH=/fuckyouverymuch");
	if(filter(argv[1])) return 0;
	system( argv[1] );
	return 0;
}


As we can see above, our path variable has been changed.

This is not a big problem however; we want to cat the flag, so we just need to give the full path for
the cat command.

Using which cat gives /bin/cat.

If we run ./cmd1 /bin/cat, the expected prompt appears.

However, the filter function prevents us from simply putting ./cmd1 "/bin/cat flag"

An easy way around this is to set a environment variable for flag.

export FLAG=flag

However, if we run ./cmd1 "/bin/cat $FLAG", the $FLAG will be replaced by bash!

To prevent this, we simply use single quotes ./cmd1 '/bin/cat $FLAG'. Single quotes avoid expansion. Another way
to solve this problem would be to use \$FLAG.

Now, the $FLAG will remain in our input, and won't be replaced until it is executed by the system call.

As the flag is required for the next challenge, and I will forget it, the flag is:

mommy now I get what PATH environment is for :)
